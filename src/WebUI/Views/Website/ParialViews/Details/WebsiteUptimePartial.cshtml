@model Application.ViewModels.Website.Details.UptimeViewModel

<div id="chart-1"></div>
<div class="summary-detail-uptime">
    <p class="item-value">@Model.PercentageUptime %</p>
    <p class="item-title">Uptime (ostatnie 30 dni)</p>

</div>

<div class="table-items">
    @if (Model.DownTimeEvents.Count<1)
    {
        <div class="empty-container">
            <p class="empty-header">Brak logów downtime</p>
            <p class="empty-description">Gratulacje, Twoja witryna nie zanotowała usterek związanych z brakiem dostępu
            </p>
        </div>
    }
    else
    {
        <table>
            <thead>
            <td class="align-center">Kod błędu</td>
            <td class="align-center mobile-hide">Data zdarzenia</td>
            <td class="align-center">Godzina zdarzenia</td>
            <td class="align-center">Czas request'a</td>
            </thead>
            @foreach (var item in Model.DownTimeEvents)
            {
                <tr>
                    <td style="text-align: left;">
                        <p class="website-title" style="text-align: center">@item.StatusNumber</p>
                    </td>
                    <td class="align-center mobile-hide">@item.TestTime.ToString("dd.MM.yyyy")</td>
                    <td class="align-center">@item.TestTime.ToString("HH:mm")</td>
                    <td class="align-center">@item.ElapsedTime ms</td>
                </tr>
            }

        </table>
    }
   

</div>

<script>
    var options_1 = {
    stroke: {
        curve: 'straight',
        width: 2, //ustawia odstwpy miedzy kwadratami
    },
    chart: {
        animations: {
            enabled: true,
            easing: 'easeinout',
            speed: 400,
            animateGradually: {
                enabled: true,
                delay: 0
            },
            dynamicAnimation: {
                enabled: true,
                speed: 350
            }
        },
        toolbar: {
            show: false
        },
        height: '150',
        type: "heatmap"
    },
    colors: ["#0057fc"],
    dataLabels: {
        enabled: false
    },
    plotOptions: {
        heatmap: {
            enableShades: false,

            colorScale: {
                ranges: [{
                        from: 200,
                        to: 206,
                        name: 'low',
                        color: '#0057fc'
                    },
                    {
                        from: 400,
                        to: 511,
                        name: 'medium',
                        color: '#ff0000'
                    },
                    {
                        from: 999,
                        to: 999,
                        name: 'medium',
                        color: '#f5f5f5'
                    },
                    {
                        from:0,
                        to:199,
                        name: 'medium',
                        color: '#ffe500'
                    },
                    {
                        from:300,
                        to:399,
                        name: 'medium',
                        color: '#ffe500'
                    }

                ]
            }
        }
    },

    series: [{
            name: "series1",
            data: [
                @foreach (var note in Model.UptimeList.GetRange(0, 60))
        {
            @:{
            @:x: "category 1",
            @:y: @(note.UptimeStatusChar),
            @:description: "@(note.UptimeTestTimeChar)",
            @:},
        }
            ]
        },

        {
            name: "series1",
            data: [
                @foreach (var note in Model.UptimeList.GetRange(60, 60))
        {
            @:{
            @:x: "category 1",
            @:y: @(note.UptimeStatusChar),
            @:description: "@(note.UptimeTestTimeChar)",
            @:},
        }
            ]
        },

        {
            name: "series1",
            data: [
                @foreach (var note in Model.UptimeList.GetRange(120, 60))
        {
            @:{
            @:x: "category 1",
            @:y: @(note.UptimeStatusChar),
            @:description: "@(note.UptimeTestTimeChar)",
            @:},
        }
            ]
        },

        {
            name: "series1",
            data: [
                @foreach (var note in Model.UptimeList.GetRange(180, 60))
        {
            @:{
            @:x: "category 1",
            @:y: @(note.UptimeStatusChar),
            @:description: "@(note.UptimeTestTimeChar)",
            @:},
        }
            ]
        },

        {
            name: "series1",
            data: [
                @foreach (var note in Model.UptimeList.GetRange(240, 60))
        {
            @:{
            @:x: "category 1",
            @:y: @(note.UptimeStatusChar),
            @:description: "@(note.UptimeTestTimeChar)",
            @:},
        }
            ]
        },

        {
            name: "series1",
            data: [
                @foreach (var note in Model.UptimeList.GetRange(300, 60))
        {
            @:{
            @:x: "category 1",
            @:y: @(note.UptimeStatusChar),
            @:description: "@(note.UptimeTestTimeChar)",
            @:},
        }
            ]
        },

        {
            name: "series1",
            data: [
                @foreach (var note in Model.UptimeList.GetRange(360, 60))
        {
            @:{
            @:x: "category 1",
            @:y: @(note.UptimeStatusChar),
            @:description: "@(note.UptimeTestTimeChar)",
            @:},
        }
            ]
        },
    ],
    fill: {
        type: "gradient",
        gradient: {
            shadeIntensity: 1,
            opacityFrom: 0.6,
            opacityTo: 0.0,
            stops: [0, 90, 100]
        }
    },
    grid: {
        show: false
    },
    yaxis: {
        show: false
    },
    tooltip: {
        custom: function(opts) {
            const desc =
                opts.ctx.w.config.series[opts.seriesIndex].data[
                    opts.dataPointIndex
                ].description;

            const value = opts.series[opts.seriesIndex][opts.dataPointIndex];

            var color = "";
            if (value === 200) {
                color = "#0057FC"
            } else {
                color = "#ff0000"
            }

            return `
                    <div class="apexcharts-tooltip-title" style="font-family: Helvetica, Arial, sans-serif; font-size: 12px; text-align:left">`+desc+`</div>
                       <div class="apexcharts-tooltip-series-group apexcharts-active" style="order: 1; display: flex;">
                           
                           <span class="apexcharts-tooltip-marker" style="background-color: `+color+`"></span>
        <div class="apexcharts-tooltip-text" style="font-family: Helvetica, Arial, sans-serif; font-size: 12px;">
            <div class="apexcharts-tooltip-y-group"><span class="apexcharts-tooltip-text-y-label">Response: </span><span class="apexcharts-tooltip-text-y-value">`+value+`</span></div>
            <div class="apexcharts-tooltip-goals-group"><span class="apexcharts-tooltip-text-goals-label"></span><span class="apexcharts-tooltip-text-goals-value"></span></div>
            <div class="apexcharts-tooltip-z-group"><span class="apexcharts-tooltip-text-z-label"></span><span class="apexcharts-tooltip-text-z-value"></span></div>
        </div>
    </div>
                    `;
        }
    },
    xaxis: {
        axisBorder: {
            show: false
        },
        axisTicks: {
            show: false,
        },
        categories: [
            "01 Jan",
            "02 Jan",
            "03 Jan",
            "04 Jan",
            "05 Jan",
            "06 Jan",
            "07 Jan"
        ],
        labels: {
            show: false
        },
        tooltip: {
            enabled: false
        }

    },

    legend: {
        show: false
    },
    //tooltip: {
    //    enabled: false
    //}
};

</script>
<script src="~/scripts/uptime-charts-details.js"></script>