// <auto-generated />
using System;
using Infrastructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Persistance.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entities.EnvVariable", b =>
                {
                    b.Property<int>("IdEnvVariable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEnvVariable"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEnvVariable");

                    b.ToTable("EnvVariable");
                });

            modelBuilder.Entity("Domain.Entities.License", b =>
                {
                    b.Property<Guid>("IdLicense")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IdLicenseType")
                        .HasColumnType("int");

                    b.Property<DateTime>("LicenseExpired")
                        .HasColumnType("datetime2");

                    b.HasKey("IdLicense");

                    b.HasIndex("IdLicenseType");

                    b.ToTable("License");
                });

            modelBuilder.Entity("Domain.Entities.LicenseType", b =>
                {
                    b.Property<int>("IdLicenseType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLicenseType"), 1L, 1);

                    b.Property<string>("LicenseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfUsers")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfWebsites")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("IdLicenseType");

                    b.ToTable("LicenseType");
                });

            modelBuilder.Entity("Domain.Entities.MachineResetSettings", b =>
                {
                    b.Property<int>("IdMachineResetSettings")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMachineResetSettings"), 1L, 1);

                    b.Property<int>("ResetTime")
                        .HasColumnType("int");

                    b.HasKey("IdMachineResetSettings");

                    b.ToTable("MachineResetSettings");
                });

            modelBuilder.Entity("Domain.Entities.MachineResponseLog", b =>
                {
                    b.Property<int>("IdMachineResponseLog")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMachineResponseLog"), 1L, 1);

                    b.Property<string>("Log")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdMachineResponseLog");

                    b.ToTable("MachineResponseLog");
                });

            modelBuilder.Entity("Domain.Entities.MachineResponseSettings", b =>
                {
                    b.Property<int>("IdMachineResponseSettings")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMachineResponseSettings"), 1L, 1);

                    b.Property<string>("ApiKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTaskTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfSelectedWebsite")
                        .HasColumnType("int");

                    b.Property<string>("TestEndpoint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WaitingTime")
                        .HasColumnType("int");

                    b.HasKey("IdMachineResponseSettings");

                    b.ToTable("MachineResponseSettings");
                });

            modelBuilder.Entity("Domain.Entities.MachineUptimeLog", b =>
                {
                    b.Property<int>("IdMachineUptimeLog")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMachineUptimeLog"), 1L, 1);

                    b.Property<string>("Log")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdMachineUptimeLog");

                    b.ToTable("MachineUptimeLog");
                });

            modelBuilder.Entity("Domain.Entities.MachineUptimeSettings", b =>
                {
                    b.Property<int>("IdMachineUptimeSettings")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMachineUptimeSettings"), 1L, 1);

                    b.Property<string>("LastTaskTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfSelectedWebsite")
                        .HasColumnType("int");

                    b.Property<int>("WaitingTime")
                        .HasColumnType("int");

                    b.HasKey("IdMachineUptimeSettings");

                    b.ToTable("MachineUptimeSettings");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdLicense")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Password");

                    b.HasKey("IdUser");

                    b.HasIndex("IdLicense");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Domain.Entities.Website", b =>
                {
                    b.Property<Guid>("IdWebsite")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BenchmarkUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdLicense")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsTestedByBenchmark")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastTestedByBenchmark")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LatestUptimeResult")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestEnviroment")
                        .HasColumnType("int");

                    b.Property<int>("TestLocation")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdWebsite");

                    b.HasIndex("IdLicense");

                    b.ToTable("Website");
                });

            modelBuilder.Entity("Domain.Entities.WebsiteResponseScore", b =>
                {
                    b.Property<int>("IdWebsiteResponseScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdWebsiteResponseScore"), 1L, 1);

                    b.Property<Guid>("IdWebsite")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TestTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("backend_duration")
                        .HasColumnType("int");

                    b.Property<int>("connect_duration")
                        .HasColumnType("int");

                    b.Property<int>("dom_content_loaded_duration")
                        .HasColumnType("int");

                    b.Property<int>("dom_content_loaded_time")
                        .HasColumnType("int");

                    b.Property<int>("dom_interactive_time")
                        .HasColumnType("int");

                    b.Property<int>("first_contentful_paint")
                        .HasColumnType("int");

                    b.Property<int>("first_paint_time")
                        .HasColumnType("int");

                    b.Property<int>("fully_loaded_time")
                        .HasColumnType("int");

                    b.Property<string>("gtmetrix_grade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("html_bytes")
                        .HasColumnType("int");

                    b.Property<int>("largest_contentful_paint")
                        .HasColumnType("int");

                    b.Property<string>("location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("onload_duration")
                        .HasColumnType("int");

                    b.Property<int>("onload_time")
                        .HasColumnType("int");

                    b.Property<int>("page_bytes")
                        .HasColumnType("int");

                    b.Property<int>("page_requests")
                        .HasColumnType("int");

                    b.Property<int>("performance_score")
                        .HasColumnType("int");

                    b.Property<int>("redirect_duration")
                        .HasColumnType("int");

                    b.Property<int>("rum_speed_index")
                        .HasColumnType("int");

                    b.Property<int>("speed_index")
                        .HasColumnType("int");

                    b.Property<string>("state")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("structure_score")
                        .HasColumnType("int");

                    b.Property<int>("time_to_first_byte")
                        .HasColumnType("int");

                    b.Property<int>("time_to_interactive")
                        .HasColumnType("int");

                    b.Property<int>("total_blocking_time")
                        .HasColumnType("int");

                    b.HasKey("IdWebsiteResponseScore");

                    b.HasIndex("IdWebsite");

                    b.ToTable("WebsiteResponseScore");
                });

            modelBuilder.Entity("Domain.Entities.WebsiteResponseSettings", b =>
                {
                    b.Property<int>("IdWebsiteResponseSettings")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdWebsiteResponseSettings"), 1L, 1);

                    b.Property<int>("Adblock")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdWebsite")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Report")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SimulateDevice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdWebsiteResponseSettings");

                    b.HasIndex("IdWebsite")
                        .IsUnique();

                    b.ToTable("WebsiteResponseSettings");
                });

            modelBuilder.Entity("Domain.Entities.WebsiteUptimeMachineLibrary", b =>
                {
                    b.Property<int>("IdWebsiteUptimeMachineLibrary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdWebsiteUptimeMachineLibrary"), 1L, 1);

                    b.Property<int>("MachinEnviroment")
                        .HasColumnType("int");

                    b.Property<string>("MachineAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MachineLocation")
                        .HasColumnType("int");

                    b.HasKey("IdWebsiteUptimeMachineLibrary");

                    b.ToTable("WebsiteUptimeMachineLibrary");
                });

            modelBuilder.Entity("Domain.Entities.WebsiteUptimeScore", b =>
                {
                    b.Property<int>("IdWebsiteUptimeScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdWebsiteUptimeScore"), 1L, 1);

                    b.Property<int>("ElapsedTime")
                        .HasColumnType("int");

                    b.Property<Guid>("IdWebsite")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StatusNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TestTime")
                        .HasColumnType("datetime2");

                    b.HasKey("IdWebsiteUptimeScore");

                    b.HasIndex("IdWebsite");

                    b.ToTable("WebsiteUptimeScore");
                });

            modelBuilder.Entity("Domain.Entities.License", b =>
                {
                    b.HasOne("Domain.Entities.LicenseType", "LicenseType")
                        .WithMany("License")
                        .HasForeignKey("IdLicenseType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LicenseType");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.License", "License")
                        .WithMany("User")
                        .HasForeignKey("IdLicense")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("License");
                });

            modelBuilder.Entity("Domain.Entities.Website", b =>
                {
                    b.HasOne("Domain.Entities.License", "License")
                        .WithMany("Website")
                        .HasForeignKey("IdLicense")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("License");
                });

            modelBuilder.Entity("Domain.Entities.WebsiteResponseScore", b =>
                {
                    b.HasOne("Domain.Entities.Website", "Website")
                        .WithMany("WebsiteResponseScore")
                        .HasForeignKey("IdWebsite")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Website");
                });

            modelBuilder.Entity("Domain.Entities.WebsiteResponseSettings", b =>
                {
                    b.HasOne("Domain.Entities.Website", "Website")
                        .WithOne("WebsiteResponseSettings")
                        .HasForeignKey("Domain.Entities.WebsiteResponseSettings", "IdWebsite")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Website");
                });

            modelBuilder.Entity("Domain.Entities.WebsiteUptimeScore", b =>
                {
                    b.HasOne("Domain.Entities.Website", "Website")
                        .WithMany("WebsiteUptimeScore")
                        .HasForeignKey("IdWebsite")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Website");
                });

            modelBuilder.Entity("Domain.Entities.License", b =>
                {
                    b.Navigation("User");

                    b.Navigation("Website");
                });

            modelBuilder.Entity("Domain.Entities.LicenseType", b =>
                {
                    b.Navigation("License");
                });

            modelBuilder.Entity("Domain.Entities.Website", b =>
                {
                    b.Navigation("WebsiteResponseScore");

                    b.Navigation("WebsiteResponseSettings");

                    b.Navigation("WebsiteUptimeScore");
                });
#pragma warning restore 612, 618
        }
    }
}
